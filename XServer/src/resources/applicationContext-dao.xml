<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.2.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">
	<!-- 
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
	 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/xserver?useUnicode=true&amp;characterEncoding=utf8" />
		<property name="username" value="root" />
		<property name="password" value="123456" />
		<property name="initialSize" value="1" />
		<property name="maxActive" value="500" />
		<!-- <property name="maxIdle" value="2" /> -->
		<property name="minIdle" value="1" />
		<property name="validationQuery" value="select 1" />
		<property name="testWhileIdle" value="true" />
		<property name="timeBetweenEvictionRunsMillis" value="300000" />
		<property name="numTestsPerEvictionRun" value="500" />
		<property name="minEvictableIdleTimeMillis" value="3600000" />
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:*/*/dao/sql/*.xml" />
		<property name="configLocation"
			value="classpath:mapperConfig.xml" />
	</bean>
	
	<!-- 配置MyBatis注解 -->
	<!-- Spring会根据这段配置，自动扫描带有指定注解的接口， 然后自动创建这个接口的实现类，并使用对应的xml 中的SQL来实现对应的方法。 
		即，Spring会自动扫描指定包下，带有注定注解的接口。 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 指定要扫描的包 -->
		<property name="basePackage" value="manytag.*.dao" />
		<!-- 指定要扫描的注解，需要自定义 -->
		<property name="annotationClass" value="cn.manytag.manytagUtil.annotation.MybatisDao" />
	</bean>

	<!-- 
	<bean id="mybatisDaoFactory" class="manytag.dao.mybatis.MyBatisDaoFactory">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	 -->

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<!-- 
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="manytag.business.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	 -->

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />
</beans>